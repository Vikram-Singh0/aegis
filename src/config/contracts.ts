// Contract configuration for Aegis protocol
// Auto-generated by deployment script

export const CONTRACT_CONFIG = {
  // Somnia Testnet addresses (update these after deployment)
  SOMNIA_TESTNET: {
    COLLATERAL_MANAGER: "0x675CBDd883A9AC410A498A52d45189D6923E57bb",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x71226879fd44eaeE437A78Fe04e4642A84bA962E",
    USDC: "0x391bE73952B77a3D5570Fc86ec67aCE24386c547",
    PRICE_ORACLE: "0xA4d2ab0B087a58D4A6ebE6562a36644c8aB27FAA",
    RISK_BOUNDS: "0xdA3E2f770183c74CE563f815ea34c91e7D8E272a",
  },
  
  // Local development addresses (for testing)
  LOCAL: {
    COLLATERAL_MANAGER: "0x675CBDd883A9AC410A498A52d45189D6923E57bb",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x71226879fd44eaeE437A78Fe04e4642A84bA962E",
    USDC: "0x391bE73952B77a3D5570Fc86ec67aCE24386c547",
    PRICE_ORACLE: "0xA4d2ab0B087a58D4A6ebE6562a36644c8aB27FAA",
    RISK_BOUNDS: "0xdA3E2f770183c74CE563f815ea34c91e7D8E272a",
  },
  
  // Production addresses (update when deploying to mainnet)
  SOMNIA_MAINNET: {
    COLLATERAL_MANAGER: "0x...", // Replace with mainnet address
    USER_VAULT: "0x...", // Replace with mainnet address
    WETH: "0x...", // Replace with mainnet address
    USDC: "0x...", // Replace with mainnet address
    PRICE_ORACLE: "0x...", // Replace with mainnet address
    RISK_BOUNDS: "0x...", // Replace with mainnet address
  }
} as const;

// Get the current network configuration
export function getContractAddresses() {
  const network = process.env.NEXT_PUBLIC_NETWORK || 'SOMNIA_TESTNET';
  
  switch (network) {
    case 'LOCAL':
      return CONTRACT_CONFIG.LOCAL;
    case 'SOMNIA_MAINNET':
      return CONTRACT_CONFIG.SOMNIA_MAINNET;
    case 'SOMNIA_TESTNET':
    default:
      return CONTRACT_CONFIG.SOMNIA_TESTNET;
  }
}

// Export the current contract addresses
export const CONTRACT_ADDRESSES = getContractAddresses();
