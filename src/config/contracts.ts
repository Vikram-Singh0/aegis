// Contract configuration for Aegis protocol
// Auto-generated by deployment script

export const CONTRACT_CONFIG = {
  // Somnia Testnet addresses (update these after deployment)
  SOMNIA_TESTNET: {
    COLLATERAL_MANAGER: "0x86F5b952E021774Ec6B14b0F14e77AF3DeDD955A",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x9a058949Fdd3F4aBE03dBc29FB0726e357042e9E",
    USDC: "0x8C2b32156EbC05528aF19DE7a51Fd6852c6C77D3",
    PRICE_ORACLE: "0xb06aFF47d9eD97f1B34ff51601BE6Af4E18C603c",
    RISK_BOUNDS: "0xf91CF0F1e172e1B61eCba96337b0402e2B409227",
  },
  
  // Local development addresses (for testing)
  LOCAL: {
    COLLATERAL_MANAGER: "0x86F5b952E021774Ec6B14b0F14e77AF3DeDD955A",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x9a058949Fdd3F4aBE03dBc29FB0726e357042e9E",
    USDC: "0x8C2b32156EbC05528aF19DE7a51Fd6852c6C77D3",
    PRICE_ORACLE: "0xb06aFF47d9eD97f1B34ff51601BE6Af4E18C603c",
    RISK_BOUNDS: "0xf91CF0F1e172e1B61eCba96337b0402e2B409227",
  },
  
  // Production addresses (update when deploying to mainnet)
  SOMNIA_MAINNET: {
    COLLATERAL_MANAGER: "0x...", // Replace with mainnet address
    USER_VAULT: "0x...", // Replace with mainnet address
    WETH: "0x...", // Replace with mainnet address
    USDC: "0x...", // Replace with mainnet address
    PRICE_ORACLE: "0x...", // Replace with mainnet address
    RISK_BOUNDS: "0x...", // Replace with mainnet address
  }
} as const;

// Get the current network configuration
export function getContractAddresses() {
  const network = process.env.NEXT_PUBLIC_NETWORK || 'SOMNIA_TESTNET';
  
  switch (network) {
    case 'LOCAL':
      return CONTRACT_CONFIG.LOCAL;
    case 'SOMNIA_MAINNET':
      return CONTRACT_CONFIG.SOMNIA_MAINNET;
    case 'SOMNIA_TESTNET':
    default:
      return CONTRACT_CONFIG.SOMNIA_TESTNET;
  }
}

// Export the current contract addresses
export const CONTRACT_ADDRESSES = getContractAddresses();
