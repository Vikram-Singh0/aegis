// Contract configuration for Aegis protocol
// Auto-generated by deployment script

export const CONTRACT_CONFIG = {
  // Somnia Testnet addresses (update these after deployment)
  SOMNIA_TESTNET: {
    COLLATERAL_MANAGER: "0x080b6CF139a6524c317D52bB485b9F649421f73a",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x6b27D52D781950d6F06eBEF9Cc8d113bfD9d3317",
    USDC: "0x496EBE4c8Caa54962a16dE65bB5974Bc451f8a0C",
    PRICE_ORACLE: "0xc7520935C9214728ab35C9AAbb5E1665Ed87446D",
    RISK_BOUNDS: "0x4a04289F28709eDA87ffE143004EE6929deae50F",
  },
  
  // Local development addresses (for testing)
  LOCAL: {
    COLLATERAL_MANAGER: "0x080b6CF139a6524c317D52bB485b9F649421f73a",
    USER_VAULT: "0x0000000000000000000000000000000000000000",
    WETH: "0x6b27D52D781950d6F06eBEF9Cc8d113bfD9d3317",
    USDC: "0x496EBE4c8Caa54962a16dE65bB5974Bc451f8a0C",
    PRICE_ORACLE: "0xc7520935C9214728ab35C9AAbb5E1665Ed87446D",
    RISK_BOUNDS: "0x4a04289F28709eDA87ffE143004EE6929deae50F",
  },
  
  // Production addresses (update when deploying to mainnet)
  SOMNIA_MAINNET: {
    COLLATERAL_MANAGER: "0x...", // Replace with mainnet address
    USER_VAULT: "0x...", // Replace with mainnet address
    WETH: "0x...", // Replace with mainnet address
    USDC: "0x...", // Replace with mainnet address
    PRICE_ORACLE: "0x...", // Replace with mainnet address
    RISK_BOUNDS: "0x...", // Replace with mainnet address
  }
} as const;

// Get the current network configuration
export function getContractAddresses() {
  const network = process.env.NEXT_PUBLIC_NETWORK || 'SOMNIA_TESTNET';
  
  switch (network) {
    case 'LOCAL':
      return CONTRACT_CONFIG.LOCAL;
    case 'SOMNIA_MAINNET':
      return CONTRACT_CONFIG.SOMNIA_MAINNET;
    case 'SOMNIA_TESTNET':
    default:
      return CONTRACT_CONFIG.SOMNIA_TESTNET;
  }
}

// Export the current contract addresses
export const CONTRACT_ADDRESSES = getContractAddresses();
